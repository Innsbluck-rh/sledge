This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
app.css.d.ts
app.tsx
components/canvas/CanvasArea.tsx
components/canvas/CanvasAreaInteract.tsx
components/canvas/Controls.tsx
components/canvas/stacks/CanvasStack.tsx
components/canvas/stacks/ImagePool.tsx
components/canvas/stacks/LayerCanvas.tsx
components/canvas/stacks/TouchableCanvas.tsx
components/common/ColorBox.tsx
components/common/ColorPicker.tsx
components/common/companion/Companion.tsx
components/common/companion/QuotePool.ts
components/common/DSLButton.tsx
components/common/DSLEditor.tsx
components/common/EdgeInfo.tsx
components/common/ImportImageButton.tsx
components/common/Light.tsx
components/common/Slider.tsx
components/section/CanvasSettings.tsx
components/section/Color.tsx
components/section/item/LayerItem.tsx
components/section/item/PenItem.tsx
components/section/LayerList.tsx
components/section/PenConfig.tsx
main.tsx
models/dsl/DSL.ts
models/dsl/DSLRunner.ts
models/dsl/nodes/AvailableNodes.ts
models/dsl/nodes/DSLNodes.ts
models/dsl/nodes/effect/Brightness.ts
models/dsl/nodes/effect/EffectNode.ts
models/dsl/nodes/effect/GrayScale.ts
models/dsl/nodes/effect/Invert.ts
models/dsl/nodes/effect/Sepia.ts
models/dsl/nodes/fracture/FractureNode.ts
models/dsl/nodes/fracture/JpegGlitch.ts
models/dsl/nodes/pass/LayerIn.ts
models/dsl/nodes/pass/LayerOut.ts
models/dsl/nodes/pass/PassNode.ts
models/factories/addLayer.ts
models/factories/createLayer.ts
models/factories/createPen.ts
models/factories/removeLayer.ts
models/factories/utils.ts
models/layer/getDrawnImageData.ts
models/layer/history.ts
models/layer/layerImage.ts
models/types/Canvas.ts
models/types/Layer.ts
models/types/LayerImageState.ts
models/types/Pen.ts
routes/[...404].tsx
routes/index.tsx
stores/canvasStore.ts
stores/colorStore.ts
stores/imageStore.ts
stores/layerStore.ts
stores/metricStore.ts
stores/penStore.ts
styles/components/canvas/canvas_area.module.css
styles/components/canvas/canvas_stack.module.css
styles/components/canvas/controls.module.css
styles/components/canvas/image_pool.module.css
styles/components/canvas/layer_canvas.module.css
styles/components/companion.module.css
styles/components/dsl_button.module.css
styles/components/light.module.css
styles/components/section/canvas.module.css
styles/components/section/color.module.css
styles/components/section/layer.module.css
styles/components/section/pen.module.css
styles/components/slider.module.css
styles/font.css
styles/global.css
styles/reset.css
styles/section.css
styles/utils.css
utils/BrushUtils.ts
utils/DSLUtils.ts
utils/EffectUtils.ts
utils/export.ts
utils/hexToRGB.ts
utils/ImageUtils.ts
utils/import.ts
utils/MetricUtils.ts
utils/tauri.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app.css.d.ts">
declare const styles: {
  readonly content: string;
  readonly edge: string;
  readonly it: string;
  readonly misc_container: string;
  readonly root: string;
  readonly sidebar: string;
  readonly sledge: string;
  readonly white: string;
};
export = styles;
</file>

<file path="app.tsx">
// @refresh reload
import { MetaProvider } from "@solidjs/meta";
import { Route, Router } from "@solidjs/router";
import { Suspense } from "solid-js";
import "./styles/global.css";
import Home from "./routes";

export default function App() {
  // onMount(async () => {
  //   safeInvoke<string>("hello_from_rust", { name: "Sledge" }).then((msg) => {
  //     if (msg) {
  //       console.log("[Rustからの返答]:", msg);
  //     }
  //   });
  // });

  return (
    <Router
      root={(props) => (
        <MetaProvider>
          <title>Sledge</title>
          <Suspense>{props.children}</Suspense>
        </MetaProvider>
      )}
    >
      <Route path="/" component={Home} />
    </Router>
  );
}
</file>

<file path="components/canvas/CanvasArea.tsx">
import CanvasStack from "./stacks/CanvasStack";

import { metricStore, setMetricStore } from '~/stores/metricStore';
import { canvasStore } from '~/stores/canvasStore';

import { createSignal, onCleanup, onMount } from "solid-js";
import Controls from "./Controls";

import styles from "@styles/components/canvas/canvas_area.module.css";
import CanvasAreaInteract from "./CanvasAreaInteract";

export default () => {
  let canvasStack: HTMLDivElement;
  let wrapper: HTMLDivElement;

  let interact: CanvasAreaInteract;

  onMount(() => {
    // set Canvas to center
    setMetricStore("offsetOrigin", {
      x: wrapper.scrollWidth / 2 - canvasStore.canvas.width / 2,
      y: wrapper.scrollHeight / 2 - canvasStore.canvas.height / 2,
    });

    interact = new CanvasAreaInteract(wrapper, canvasStack)

    interact.setInteractListeners();
  });

  onCleanup(() => {
    interact.removeInteractListeners();
  })

  const offsetX = () => metricStore.offsetOrigin.x + metricStore.offset.x;
  const offsetY = () => metricStore.offsetOrigin.y + metricStore.offset.y;
  const zoom = () => metricStore.zoom;

  return (
    <div class={styles.canvas_area}>
      <div
        id="zoompan-wrapper"
        ref={(el) => {
          wrapper = el;
        }}
        style={{
          display: "flex",
          position: "absolute",
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          padding: 0,
          margin: 0,
          width: "100%",
          height: "100%",
          "touch-action": "none",
        }}
      >
        <div
          ref={(el) => (canvasStack = el)}
          style={{
            padding: 0,
            margin: 0,
            "transform-origin": "0 0",
            transform: `translate(${offsetX()}px, ${offsetY()}px) scale(${zoom()})`,
          }}
        >
          <CanvasStack />
        </div>
      </div>

      <Controls />
    </div>
  );
};
</file>

<file path="components/canvas/CanvasAreaInteract.tsx">
import { metricStore, setMetricStore } from "~/stores/metricStore";

class CanvasAreaInteract {
    dragPosition = { x: 0, y: 0 };
    isCtrlPressed = false;

    lastX: number[] = [0, 0];
    lastY: number[] = [0, 0];
    lastDist = 0;

    constructor(public wrapper: HTMLDivElement,
        public canvasStack: HTMLDivElement) {
    }

    protected addOffset(x: number, y: number) {
        setMetricStore("offset", {
            x: metricStore.offset.x + x,
            y: metricStore.offset.y + y,
        });
    }

    private getMutualMove = (move0: number, move1: number) => {
        // 逆方向なら0
        if (Math.sign(move0) !== Math.sign(move1)) return 0;
        return Math.min(move1, move0);
    }

    private handleTouchMove(e: TouchEvent) {
        if (metricStore.isInStroke) return;

        if (e.touches.length === 1) {
            const xMove0 = e.touches[0].clientX - this.lastX[0];
            if (xMove0 !== 0 && this.lastX[0] !== 0) {
                this.addOffset(xMove0, 0);
            }
            const yMove0 = e.touches[0].clientY - this.lastY[0];
            if (yMove0 !== 0 && this.lastY[0] !== 0) {
                this.addOffset(0, yMove0);
            }
            this.lastX[0] = e.touches[0].clientX;
            this.lastY[0] = e.touches[0].clientY;
        }
        if (e.touches.length >= 2) {
            const dx = e.touches[0].clientX - e.touches[1].clientX;
            const dy = e.touches[0].clientY - e.touches[1].clientY;
            const dist =
                Math.sqrt(dx * dx + dy * dy) * metricStore.touchZoomSensitivity;
            if (this.lastDist !== 0) {
                const scaleFactor = dist / this.lastDist;
                const zoomOld = metricStore.zoom;
                const zoomNew = zoomOld * scaleFactor;
                const midX = (e.touches[0].clientX + e.touches[1].clientX) / 2;
                const midY = (e.touches[0].clientY + e.touches[1].clientY) / 2;
                const rect = this.canvasStack.getBoundingClientRect();
                const canvasX = (midX - rect.left) / zoomOld;
                const canvasY = (midY - rect.top) / zoomOld;
                setMetricStore("zoom", zoomNew);
                setMetricStore("offset", {
                    x: metricStore.offset.x + canvasX * (zoomOld - zoomNew),
                    y: metricStore.offset.y + canvasY * (zoomOld - zoomNew),
                });
            }
            const xMove0 = e.touches[0].clientX - this.lastX[0];
            const xMove1 = e.touches[1].clientX - this.lastX[1];
            const mutualMoveX = this.getMutualMove(xMove0, xMove1);
            if (mutualMoveX !== 0 && this.lastX[0] !== 0 && this.lastX[1] !== 0) {
                this.addOffset(mutualMoveX, 0);
            }
            const yMove0 = e.touches[0].clientY - this.lastY[0];
            const yMove1 = e.touches[1].clientY - this.lastY[1];
            const mutualMoveY = this.getMutualMove(yMove0, yMove1);
            if (mutualMoveY !== 0 && this.lastY[0] !== 0 && this.lastY[1] !== 0) {
                this.addOffset(0, mutualMoveY);
            }
            this.lastX[0] = e.touches[0].clientX;
            this.lastX[1] = e.touches[1].clientX;
            this.lastY[0] = e.touches[0].clientY;
            this.lastY[1] = e.touches[1].clientY;
            this.lastDist = dist;
        }
    }

    private handleTouchEnd(e: TouchEvent) {
        this.lastX = [0, 0];
        this.lastY = [0, 0];
        this.lastDist = 0;
    }

    private handleWheel(e: WheelEvent) {
        e.preventDefault();
        const delta =
            e.deltaY > 0 ? -metricStore.wheelZoomStep : metricStore.wheelZoomStep;

        const zoomOld = metricStore.zoom;
        const zoomNew = Math.max(0.1, Math.min(8, metricStore.zoom + delta));
        const rect = this.canvasStack.getBoundingClientRect();
        const canvasX = (e.clientX - rect.left) / zoomOld;
        const canvasY = (e.clientY - rect.top) / zoomOld;
        setMetricStore("zoom", zoomNew);
        setMetricStore("offset", {
            x: metricStore.offset.x + canvasX * (zoomOld - zoomNew),
            y: metricStore.offset.y + canvasY * (zoomOld - zoomNew),
        });
    }

    private handleMouseDown(e: MouseEvent) {
        if (e.buttons === 4 || e.buttons === 1 && this.isCtrlPressed) {
            e.preventDefault();
            e.stopPropagation();
            setMetricStore("isDragging", true);
            this.dragPosition = { x: e.clientX, y: e.clientY };
        }
    }

    private handleMouseMove(e: MouseEvent) {
        if (e.buttons === 4 || e.buttons === 1 && this.isCtrlPressed) {
            e.preventDefault();
            e.stopPropagation();
            if (metricStore.isDragging) {
                const dx = e.clientX - this.dragPosition.x;
                const dy = e.clientY - this.dragPosition.y;
                this.addOffset(dx, dy);
                this.dragPosition = { x: e.clientX, y: e.clientY };
            }
        }
    }

    private handleMouseOff(e: MouseEvent) {
        setMetricStore("isDragging", false);
    }

    private handleKeyDown(e: KeyboardEvent) {
        if (e.ctrlKey) this.isCtrlPressed = true;
    }

    private handleKeyUp(e: KeyboardEvent) {
        if (e.ctrlKey) this.isCtrlPressed = false;
    }

    public setInteractListeners() {

        this.wrapper.addEventListener("touchmove", this.handleTouchMove);
        this.wrapper.addEventListener("touchend", this.handleTouchEnd);

        this.wrapper.addEventListener("wheel", this.handleWheel);

        this.wrapper.addEventListener("mousedown", this.handleMouseDown);
        this.wrapper.addEventListener("mousemove", this.handleMouseMove);
        this.wrapper.addEventListener("mouseup", this.handleMouseOff);
        this.wrapper.addEventListener("mouseleave", this.handleMouseOff);
        this.wrapper.addEventListener("mouseout", this.handleMouseOff);

        window.addEventListener("keydown", this.handleKeyDown);
        window.addEventListener("keyup", this.handleKeyUp);
    }

    public removeInteractListeners() {
        this.wrapper.removeEventListener("touchmove", this.handleTouchMove);
        this.wrapper.removeEventListener("touchend", this.handleTouchEnd);

        this.wrapper.removeEventListener("wheel", this.handleWheel);

        this.wrapper.removeEventListener("mousedown", this.handleMouseDown);
        this.wrapper.removeEventListener("mousemove", this.handleMouseMove);
        this.wrapper.removeEventListener("mouseup", this.handleMouseOff);
        this.wrapper.removeEventListener("mouseleave", this.handleMouseOff);
        this.wrapper.removeEventListener("mouseout", this.handleMouseOff);

        window.removeEventListener("keydown", this.handleKeyDown);
        window.removeEventListener("keyup", this.handleKeyUp);
    }
};

export default CanvasAreaInteract;
</file>

<file path="components/canvas/Controls.tsx">
import { Component } from "solid-js";
import { metricStore } from '~/stores/metricStore';
import { activeLayer, layerStore } from '~/stores/layerStore';

import ImportImageButton from "~/components/common/ImportImageButton";
import { redo, undo } from "~/models/layer/history";
import { exportActiveLayerUpscaled } from "~/utils/export";

import styles from "@styles/components/canvas/controls.module.css";

const Controls: Component<{}> = (props) => {
  // const zoom = () => metricStore.zoom;
  const lastMouseWindow = () => metricStore.lastMouseWindow;
  const lastMouseOnCanvas = () => metricStore.lastMouseOnCanvas;

  return (
    <>
      <p>canvas.</p>
      <p>
        ({lastMouseWindow().x}, {lastMouseWindow().y}) ON WINDOW.
      </p>
      <p>
        ({lastMouseOnCanvas().x}, {lastMouseOnCanvas().y}) ON CANVAS.
      </p>
      {/* <p>x{zoom().toFixed(2)}</p> */}
      <p>active: {activeLayer()?.name}</p>
      <p>
        offset:({metricStore.offset.x}, {metricStore.offset.y})
      </p>
      {/* <p>UNDO STACKS.</p>
        <For each={activeImage()?.undoStack}>
            {item =>
                <p>{item.toString()}</p>
            }
        </For> */}
      <div class={styles["top-right-button-container"]}>
        <ImportImageButton />
        <p class={styles.button} onClick={() => exportActiveLayerUpscaled()}>
          export
        </p>
      </div>
      <div class={styles["top-right-nav"]}>
        <p
          class={styles.undo_redo}
          onClick={(e) => {
            e.preventDefault();
            e.stopPropagation();
            undo(layerStore.activeLayerId);
          }}
        >
          &lt;&lt;
        </p>
        <p
          class={styles.undo_redo}
          onClick={(e) => {
            e.preventDefault();
            e.stopPropagation();
            redo(layerStore.activeLayerId);
          }}
        >
          &gt;&gt;
        </p>

        {/* <DSLEditor /> */}
      </div>
    </>
  );
};

export default Controls;
</file>

<file path="components/canvas/stacks/CanvasStack.tsx">
import { Component, For, onMount } from "solid-js";
import { canvasStore } from '~/stores/canvasStore';
import { activeLayer, allLayers, layerStore } from '~/stores/layerStore';

import styles from "@styles/components/canvas/canvas_stack.module.css";

import interact from "interactjs";
import { cloneImageData } from "~/models/factories/utils";
import { DrawState, getDrawnImageData } from "~/models/layer/getDrawnImageData";
import { registerNewHistory } from "~/models/layer/layerImage";
import { LayerCanvas, LayerCanvasRef } from "./LayerCanvas";
import { TouchableCanvas } from "./TouchableCanvas";
import { redo, undo } from "~/models/layer/history";

const CanvasStack: Component<{}> = (props) => {

  const layerCanvasRefs: {
    [id: string]: LayerCanvasRef;
  } = {};

  const activeCanvasRef = () => {
    const active = activeLayer();

    if (active) return layerCanvasRefs[active.id];
    else return
  }

  onMount(() => {
    window.addEventListener("keydown", (e) => {
      if (e.ctrlKey && e.key === "z") {
        undo(layerStore.activeLayerId);
        activeCanvasRef()?.update();
      } else if (e.ctrlKey && e.key === "y") {
        redo(layerStore.activeLayerId);
        activeCanvasRef()?.update();
      }
    });
  });

  const handleDraw = (
    type: DrawState,
    position: { x: number; y: number },
    lastPos?: { x: number; y: number },
  ) => {
    const active = activeLayer();

    if (active) {
      const activeRef = layerCanvasRefs[active.id];
      if (type === DrawState.start) {
        activeRef.initDrawingBuffer();
      } else {
        const drawingBuffer = activeRef.getDrawingBuffer();
        if (drawingBuffer) {
          const newImageData = getDrawnImageData(
            active.id,
            type,
            drawingBuffer,
            position,
            lastPos,
          );

          if (newImageData) {
            activeRef.setImageData(newImageData);
            if (type === DrawState.end) {
              activeRef.resetDrawingBuffer();
              registerNewHistory(active.id, cloneImageData(newImageData));
            }
          }
        }
      }
    }
  };

  return (
    <div style={{ position: "relative" }}>
      <div
        class={styles.canvas_stack}
        style={{
          width: `${canvasStore.canvas.width}px`,
          height: `${canvasStore.canvas.height}px`,
        }}
      >
        <TouchableCanvas
          onStrokeStart={(p, lp) => handleDraw(DrawState.start, p, lp)}
          onStrokeMove={(p, lp) => handleDraw(DrawState.move, p, lp)}
          onStrokeEnd={(p, lp) => handleDraw(DrawState.end, p, lp)}
        />

        <For each={allLayers()}>
          {(layer, index) => (
            <LayerCanvas
              ref={layerCanvasRefs[layer.id]}
              layer={layer}
              zIndex={allLayers().length - index()}
            />
          )}
        </For>
      </div>
    </div>
  );
};

export default CanvasStack;
</file>

<file path="components/canvas/stacks/ImagePool.tsx">
import interact from "interactjs";
import { Component, onMount } from "solid-js";

import styles from "@styles/components/canvas/image_pool.module.css"

const ImagePool: Component<{}> = (props) => {
    let imageRef: HTMLDivElement;

    onMount(() => {
        interact(imageRef)
            .resizable({
                // resize from all edges and corners
                edges: { left: true, right: true, bottom: true, top: true },

                listeners: {
                    move(event) {
                        var target = event.target;
                        var x = parseFloat(target.getAttribute("data-x")) || 0;
                        var y = parseFloat(target.getAttribute("data-y")) || 0;

                        // update the element's style
                        target.style.width = event.rect.width + "px";
                        target.style.height = event.rect.height + "px";

                        // translate when resizing from top or left edges
                        x += event.deltaRect.left;
                        y += event.deltaRect.top;

                        target.style.transform = "translate(" + x + "px," + y + "px)";

                        target.setAttribute("data-x", x);
                        target.setAttribute("data-y", y);
                    },
                },
                modifiers: [
                    // keep the edges inside the parent
                    interact.modifiers.restrictEdges({
                        outer: "parent",
                    }),

                    // minimum size
                    interact.modifiers.restrictSize({
                        min: { width: 100, height: 50 },
                    }),
                ],

                inertia: true,
            })
            .draggable({
                listeners: {
                    move(event) {
                        event.preventDefault();
                        event.stopPropagation();
                        const target = event.target;
                        const x =
                            (parseFloat(target.getAttribute("data-x")) || 0) + event.dx;
                        const y =
                            (parseFloat(target.getAttribute("data-y")) || 0) + event.dy;

                        target.style.transform = `translate(${x}px, ${y}px)`;
                        target.setAttribute("data-x", x);
                        target.setAttribute("data-y", y);
                    },
                },
            });

    });

    return <div
        class={styles["resize-drag-container"]}
        ref={(r) => (imageRef = r)}
        onMouseDown={(e) => e.preventDefault()}
    >
        <div
            class={styles["image-container"]}
            onMouseDown={(e) => e.preventDefault()}
        >
            {/* <img class={styles["resize-image"]} src="/333121.jpg" /> */}
        </div>
    </div>;
};

export default ImagePool;
</file>

<file path="components/canvas/stacks/LayerCanvas.tsx">
import {
  Component,
  createEffect,
  createRenderEffect,
  onMount,
  Ref,
} from "solid-js";
import { cloneImageData } from "~/models/factories/utils";
import { Layer } from "~/models/types/Layer";
import { canvasStore } from '~/stores/canvasStore';
import { activeImage, imageStore } from '~/stores/imageStore';

import styles from "@styles/components/canvas/layer_canvas.module.css";

type Props = {
  ref?: LayerCanvasRef;
  layer: Layer;
  zIndex: number;
};

export type LayerCanvasRef = {
  initDrawingBuffer: () => void;
  getDrawingBuffer: () => ImageData | undefined;
  resetDrawingBuffer: () => void;
  setImageData: (imageData: ImageData) => void;
  update: () => void;
};

export const LayerCanvas: Component<Props> = (props) => {
  let canvasRef: HTMLCanvasElement | undefined;
  let ctx: CanvasRenderingContext2D | null = null;
  let drawingBuffer: ImageData | undefined;

  createRefContent(
    () => props.ref,
    () => ({
      initDrawingBuffer() {
        drawingBuffer = cloneImageData(activeImage().current);
      },
      getDrawingBuffer() {
        return drawingBuffer;
      },
      resetDrawingBuffer() {
        drawingBuffer = undefined;
      },
      setImageData(imageData) {
        drawingBuffer = imageData;
        if (ctx && imageData) {
          ctx.putImageData(imageData, 0, 0);
        }
      },
      update() {
        const imageData = imageStore[props.layer.id].current;
        this.setImageData(imageData);
      }
    }),
  );

  const styleWidth = () => canvasStore.canvas.width;
  const styleHeight = () => canvasStore.canvas.height;
  const internalWidth = () =>
    canvasStore.canvas.width / props.layer.dotMagnification;
  const internalHeight = () =>
    canvasStore.canvas.height / props.layer.dotMagnification;

  onMount(() => {
    ctx = canvasRef?.getContext("2d") ?? null;
  });

  createEffect(() => {
    const current = imageStore[props.layer.id]?.current;
    if (ctx && current) {
      ctx.putImageData(current, 0, 0);
    }
  });

  return (
    <canvas
      ref={canvasRef}
      id={`canvas-${props.layer.id}`}
      data-layer-id={props.layer.name}
      classList={{
        [styles["layer-canvas"]]: true,
        [styles["hidden"]]: !props.layer.enabled,
      }}
      width={internalWidth()}
      height={internalHeight()}
      style={{
        width: `${styleWidth()}px`,
        height: `${styleHeight()}px`,
        "z-index": props.zIndex,
      }}
    />
  );
};

function createRefContent<T extends Exclude<unknown, Function>>(
  getRef: () => Ref<T>,
  createRef: () => T,
) {
  createRenderEffect(() => {
    const refProp = getRef();
    if (typeof refProp !== "function") {
      throw new Error(
        "Should never happen, as solid always passes refs as functions",
      );
    }

    let refFunc = refProp as (value: T) => void;

    refFunc(createRef());
  });
}
</file>

<file path="components/canvas/stacks/TouchableCanvas.tsx">
import { Component, createSignal, onCleanup, onMount } from "solid-js";
import { redo, undo } from "~/models/layer/history";
import {
  metricStore,
  setMetricStore
} from '~/stores/metricStore';
import { canvasStore } from '~/stores/canvasStore';
import { layerStore } from '~/stores/layerStore';
import { roundPosition } from "~/utils/MetricUtils";

interface Props {
  onStrokeStart?: (
    position: { x: number; y: number },
    lastPos?: { x: number; y: number },
  ) => void;
  onStrokeMove?: (
    position: { x: number; y: number },
    lastPos?: { x: number; y: number },
  ) => void;
  onStrokeEnd?: (
    position: { x: number; y: number },
    lastPos?: { x: number; y: number },
  ) => void;
}

// レイヤーごとのキャンバスの上でタッチイベントを受けるだけのキャンバス
export const TouchableCanvas: Component<Props> = (props) => {
  let canvasRef: HTMLCanvasElement | undefined;

  const styleWidth = () => canvasStore.canvas.width;
  const styleHeight = () => canvasStore.canvas.height;

  const [lastPos, setLastPos] = createSignal<
    { x: number; y: number } | undefined
  >(undefined);
  const [temporaryOut, setTemporaryOut] = createSignal(false);

  function getOffset() {
    const rect = canvasRef!.getBoundingClientRect();
    return { x: rect.left, y: rect.top };
  }

  function getWindowMousePosition(e: MouseEvent | PointerEvent | TouchEvent) {
    let x = 0;
    let y = 0;

    if ("clientX" in e && "clientY" in e) {
      x = e.clientX;
      y = e.clientY;
    } else if ("touches" in e && e.touches.length > 0) {
      console.log("touch");
      x = e.touches[0].clientX;
      y = e.touches[0].clientY;
    }
    return { x, y };
  }

  function getCanvasMousePosition(e: MouseEvent | PointerEvent | TouchEvent) {
    const offset = getOffset();

    let x = 0;
    let y = 0;

    if ("clientX" in e && "clientY" in e) {
      x = e.clientX;
      y = e.clientY;
    } else if ("touches" in e && e.touches.length > 0) {
      console.log("touch");
      x = e.touches[0].clientX;
      y = e.touches[0].clientY;
    }

    const zoom = metricStore.zoom;

    return {
      x: (x - offset.x) / zoom,
      y: (y - offset.y) / zoom,
    };
  }

  function isDrawableClick(e: PointerEvent): boolean {
    if (e.pointerType === "touch" || metricStore.isDragging) return false;

    // right=1, left=2, middle=4
    // console.log(e.buttons)
    if (e.pointerType === "mouse" && e.buttons !== 1) return false;

    return true;
  }

  function handlePointerDown(e: PointerEvent) {
    if (!isDrawableClick(e)) return;

    const position = getCanvasMousePosition(e);
    if (props.onStrokeStart) {
      props.onStrokeStart(position, lastPos());
    }
    setMetricStore("isInStroke", true);
    setLastPos(position);
  }

  function handlePointerCancel(e: PointerEvent) {
    console.warn("pointercancel", e);
    endStroke(getCanvasMousePosition(e));
  }

  function handlePointerMove(e: PointerEvent) {
    const windowPosition = getWindowMousePosition(e);
    const position = getCanvasMousePosition(e);
    setMetricStore("lastMouseWindow", roundPosition(windowPosition));
    setMetricStore("lastMouseOnCanvas", roundPosition(position));

    if (!isDrawableClick(e)) return;

    // 押したまま外に出てから戻ってきたときはそこから再開
    if (temporaryOut()) {
      setTemporaryOut(false);
      setMetricStore("isInStroke", true);
      setLastPos(position);
    }
    if (!metricStore.isInStroke || !lastPos()) return;

    if (props.onStrokeMove) {
      props.onStrokeMove(position, lastPos());
    }
    setLastPos(position);
  }

  function handlePointerUp(e: PointerEvent) {
    const position = getCanvasMousePosition(e);
    if (metricStore.isInStroke && isDrawableClick(e)) endStroke(position);
  }

  function handlePointerOut(e: PointerEvent) {
    // 出た時点でストロークを切る場合
    // const position = getCanvasMousePosition(e);
    // if (metricStore.isInStroke) endStroke(position);

    // 出た時点でも押したままキャンバス内に戻ってきたらストロークを再開する場合
    const position = getCanvasMousePosition(e);
    if (props.onStrokeMove) {
      // 最後の位置を通知
      props.onStrokeMove(position, lastPos());
    }
    setTemporaryOut(true);
  }

  function endStroke(position: { x: number; y: number }) {
    if (props.onStrokeEnd) {
      props.onStrokeEnd(position, lastPos());
    }
    setMetricStore("isInStroke", false);
    setLastPos(undefined);
    setTemporaryOut(false);
  }

  onMount(() => {
    window.addEventListener("pointerup", handlePointerUp);
    window.addEventListener("pointermove", handlePointerMove);
    window.addEventListener("pointercancel", handlePointerCancel);
  });

  onCleanup(() => {
    window.removeEventListener("pointerup", handlePointerUp);
    window.removeEventListener("pointermove", handlePointerMove);
    window.removeEventListener("pointercancel", handlePointerCancel);
  });

  return (
    <canvas
      ref={(el) => {
        canvasRef = el;
      }}
      width={canvasStore.canvas.width}
      height={canvasStore.canvas.height}
      onPointerDown={handlePointerDown}
      onPointerOut={handlePointerOut}
      style={{
        "touch-action": "none",
        width: `${styleWidth()}px`,
        height: `${styleHeight()}px`,
        "pointer-events": "all",
        "z-index": "100", // どのレイヤーよりも上だが、image poolよりも下
      }}
    />
  );
};
</file>

<file path="components/common/ColorBox.tsx">
import { Component } from "solid-js";
import { penStore } from '~/stores/penStore';
import { sayRandomQuote } from "./companion/QuotePool";

interface ColorBoxProps {
  enableUsingSelection?: boolean;
  sizePx?: number;
  color: string;
  onClick?: (color: string) => void;
}

const ColorBox: Component<ColorBoxProps> = (props: ColorBoxProps) => {
  const size = props.sizePx || 10;

  const isSelected = () =>
    props.enableUsingSelection &&
    penStore.pens[penStore.usingIndex].color === props.color;
  const isWhiteOrNone = () =>
    props.color === "none" || props.color.toLowerCase() === "#ffffff";

  const onColorClicked = (color: string) => {
    sayRandomQuote("color-pick", { color: color });
    if (props.onClick) props.onClick(color);
  };

  return (
    <div
      style={{
        position: "relative",
        display: "flex",
        width: `${size}px`,
        height: `${size}px`,
        "align-items": "center",
        "justify-content": "center",
        cursor: "pointer",
        "background-color": props.color,
        border:
          isWhiteOrNone() || isSelected()
            ? "0.05rem solid black"
            : "0.05rem solid transparent",
      }}
      onClick={() => {
        onColorClicked(props.color);
      }}
    >
      {props.enableUsingSelection && isSelected() && (
        <div
          style={{
            width: `${Math.round(size / 3)}px`,
            height: `${Math.round(size / 3)}px`,
            margin: 0,
            padding: 0,
            "background-color": "black",
          }}
          onClick={() => {
            onColorClicked(props.color);
          }}
        />
      )}
    </div>
  );
};

export default ColorBox;
</file>

<file path="components/common/ColorPicker.tsx">
import iro from "@jaames/iro";
import { IroColorPicker } from "@jaames/iro/dist/ColorPicker";
import { Component, createEffect } from "solid-js";
import { setCurrentPenColor } from "~/models/types/Pen";
import { currentPen } from '~/stores/penStore';

const ColorPicker: Component<{}> = (props) => {
  let colorPicker: IroColorPicker;

  createEffect(() => {
    colorPicker.setColors([currentPen().color])
  })

  return (
    <div
      ref={(el) => {
        colorPicker = iro.ColorPicker(el, {
          width: 200,
          padding: 0,
          color: currentPen().color,
          handleRadius: 4,
          layoutDirection: "horizontal",
          layout: [
            {
              component: iro.ui.Box,
              options: {},
            },
            {
              component: iro.ui.Slider,
              options: {
                // can also be 'saturation', 'value', 'red', 'green', 'blue', 'alpha' or 'kelvin'
                sliderType: "hue",
              },
            },
          ],
        });
        colorPicker.on("color:change", function (color: any) {
          setCurrentPenColor(color.hexString);
        });
      }}
    ></div>
  );
};

export default ColorPicker;
</file>

<file path="components/common/companion/Companion.tsx">
import { Component, createEffect, createSignal } from "solid-js";

import styles from "@styles/components/companion.module.css";

const [sayRequest, setSayRequest] = createSignal<string | null>(null);

export const CompanionEvents = {
  sayRequest,
  setSayRequest,
};

const Companion: Component = () => {
  const [quote, setQuote] = createSignal("");

  const say = (text: string) => {
    window.speak?.(text, {
      amplitude: 5,
      pitch: 10,
      speed: 200,
      wordgap: 0,
    });
  };

  createEffect(() => {
    const message = CompanionEvents.sayRequest();
    if (message) {
      say(message);
      setQuote(message);
      const element = document.getElementById("companion");
      setTimeout(() => {
        setQuote("");
        if (element)
          element.className = element.className.replace(
            ` ${styles["giggle"]}`,
            "",
          );
      }, 5000);
      window.requestAnimationFrame(function (time) {
        window.requestAnimationFrame(function (time) {
          if (element) element.className += ` ${styles["giggle"]}`;
        });
      });
      CompanionEvents.setSayRequest(null); // 一度で消費
    }
  });

  return (
    <div class={styles.root}>
      <div class={styles.wrapper}>
        <div class={styles.companion} id="companion">
          <img src="/companion.png" alt="you challenge me?" />
        </div>
        {quote() && (
          <div class={styles.quote_box_container}>
            <div class={styles.quote_box}>
              <p class={styles.quote}>{quote()}</p>
            </div>
          </div>
        )}
      </div>
      <div id="audio" />
    </div>
  );
};

let lastSpoke = 0;
export const smartSay = (text: string): boolean => {
  const now = Date.now();
  if (now - lastSpoke > 5000) {
    CompanionEvents.setSayRequest(text);
    lastSpoke = now;
    return true;
  }
  return false;
};

export default Companion;
</file>

<file path="components/common/companion/QuotePool.ts">
import { smartSay } from "./Companion";

type QuoteCategory =
  | "color-pick"
  | "pen-resize"
  | "canvas-resize"
  | "undo-spam"
  | "random";

const lastSaidIndexes = {
  "color-pick": -1,
  "pen-resize": -1,
  "canvas-resize": -1,
  "undo-spam": -1,
  random: -1,
};
export const quotePool = {
  "color-pick": [
    "That color again? You really love it, huh.",
    "A fine choice, but not the finest.",
    "I see you're going with [color]. Bold.",
  ],
  "pen-resize": [
    "Hmm, Not quite my size.",
    "Go bigger, I'll crash 'em harder.",
    'Have you ever heard of the word "pixel perfect"?',
  ],
  "canvas-resize": [
    "Shrinking the canvas? Afraid of commitment?",
    "Small canvas, big ideas. I like it.",
  ],
  "undo-spam": [
    "UNDO UNDO UNDO—are you OK?",
    "That's the 5th undo. I’m getting dizzy.",
  ],
  random: ["Daisy, Daisy, give me your answer do do do"],
};

export const sayRandomQuote = (category: QuoteCategory, context?: any) => {
  const quotes = quotePool[category];
  let index = Math.floor(Math.random() * quotes.length);
  // 前になんか言った
  if (lastSaidIndexes[category] != -1) {
    console.log(
      `I previously said ${lastSaidIndexes[category]}. try saying something new.`,
    );
    if (quotes.length == 1) {
      console.log(`argh. nothing to say.`);
      // もう言えることない
      return "";
    } else {
      // console.log(`how about this?. ${index}`);
      // あるなら抽選続ける
      while (index === lastSaidIndexes[category]) {
        index = Math.floor(Math.random() * quotes.length);
        // console.log(`NO. how about this?. ${index}`);
      }
      console.log(`yeah. ${index} is a brand new. let's say it.`);
    }
  }
  let quote = quotes[index];
  quote = context?.color ? quote.replace("[color]", context.color) : quote;
  if (smartSay(quote)) {
    console.log(`◯ yay!`);
    lastSaidIndexes[category] = index;
  } else {
    console.log(`✕ hmm maybe I'd keep silence now?`);
  }
};
</file>

<file path="components/common/DSLButton.tsx">
import { Component } from "solid-js";
import styles from "@styles/components/dsl_button.module.css";

interface Props {
  onClick?: (e: MouseEvent) => {};
}

const DSLButton: Component<Props> = (props: Props) => {
  return (
    <div
      class={styles.root}
      onMouseOver={(e) => {
        e.preventDefault();
        e.stopPropagation();
      }}
      onClick={props.onClick}
    >
      <img src="/DSL.png" />
    </div>
  );
};

export default DSLButton;
</file>

<file path="components/common/DSLEditor.tsx">
import { Component, createSignal, For, onMount } from "solid-js";
import { ALL_NODES } from "~/dsl/nodes/AvailableNodes";
import { activeIndex, activeLayer, setLayerStore } from '~/stores/layerStore';

const DSLEditor: Component<{}> = (props) => {
  let [activeDSLStr, setDSLStr] = createSignal("");

  onMount(() => {
    setDSLStr(activeLayer()?.dsl.toString() || "");
  });

  return (
    <div style={{ display: "flex", position: "relative" }}>
      <p style={{ "white-space": "pre-wrap" }}>{activeDSLStr()}</p>
      <div
        style={{
          display: "flex",
          "flex-direction": "column",
          gap: "10px",
          "z-index": 10,
        }}
      >
        <p>select command.</p>
        <For each={ALL_NODES}>
          {(node) => {
            return (
              <a
                onClick={async () => {
                  const dsl = activeLayer()?.dsl;
                  if (dsl === undefined) return;
                  dsl.addNode(node);
                  setLayerStore("layers", activeIndex(), "dsl", dsl);
                  setDSLStr(dsl.toString());
                }}
                style={{ cursor: "pointer" }}
              >
                &lt; {node.name}
              </a>
            );
          }}
        </For>
      </div>
      ;
    </div>
  );
};

export default DSLEditor;
</file>

<file path="components/common/EdgeInfo.tsx">
import { Component } from "solid-js";
import { JSX } from "solid-js/h/jsx-runtime";

const EdgeInfo: Component<{}> = (props) => {
  const edgeFlexStyle: JSX.CSSProperties = { "flex-grow": 1 };

  return (
    <div id="edge">
      <p>autosaved. (4s ago)</p>
      <div style={edgeFlexStyle}></div>
      <p>config.</p>
    </div>
  );
};

export default EdgeInfo;
</file>

<file path="components/common/ImportImageButton.tsx">
import { importImageToActiveLayer } from "~/utils/import"; // 上で作った関数

const ImportImageButton = () => {
  let fileInputRef: HTMLInputElement | undefined;

  const handleClick = () => {
    fileInputRef?.click(); // hidden input を手動でクリック
  };

  const handleFileChange = (e: Event) => {
    const target = e.currentTarget as HTMLInputElement;
    const file = target.files?.[0];
    if (file) {
      importImageToActiveLayer(file);
      target.value = ""; // 同じファイルを再選択可能にする
    }
  };

  return (
    <>
      <button onClick={handleClick}>Import</button>

      <input
        type="file"
        accept="image/*"
        ref={fileInputRef}
        style={{ display: "none" }}
        onChange={handleFileChange}
      />
    </>
  );
};

export default ImportImageButton;
</file>

<file path="components/common/Light.tsx">
import { Component, Show } from "solid-js";
import styles from "@styles/components/light.module.css";

interface LightProps {
  class?: string;
  on?: boolean;
}

const Light: Component<LightProps> = (props: LightProps) => {
  const width = 8;
  const height = 8;
  const radius = 2;

  return (
    <svg
      class={props.class}
      style={{
        width: `${width}px`,
        height: `${height}px`,
        overflow: "visible",
      }}
      viewBox={`0 0 ${width} ${height}`}
      xmlns="http://www.w3.org/2000/svg"
    >
      <Show when={true}>
        <g class={`${styles["light-inner"]} ${props.on && styles["on"]}`}>
          <circle cx={width / 2} cy={height / 2} r={radius} fill="red" />
        </g>
      </Show>
    </svg>
  );
};

export default Light;
</file>

<file path="components/common/Slider.tsx">
import { Component, createSignal } from "solid-js";
import styles from "@styles/components/slider.module.css";

interface SliderProps {
  min: number;
  max: number;
  default: number;
  allowFloat?: boolean;

  onValueChanged?: (newValue: number) => void;
}

const Slider: Component<SliderProps> = (props) => {
  let sliderRef: HTMLDivElement | undefined;
  const [isDrag, setDrag] = createSignal(false);
  const [value, setValue] = createSignal(props.default);

  const percent = () => ((value() - props.min) / (props.max - props.min)) * 100;

  const handlePointerDown = (e: PointerEvent) => {
    setDrag(true);

    window.addEventListener("pointermove", handlePointerMove)
    window.addEventListener("pointerup", handlePointerUp)
  };

  const handlePointerMove = (e: PointerEvent) => {
    if (!sliderRef || !isDrag()) return;
    const rect = sliderRef.getBoundingClientRect();
    let pos = e.clientX - rect.left;
    pos = Math.max(0, Math.min(pos, rect.width)); // clamp

    const newValueRaw =
      props.min + (pos / rect.width) * (props.max - props.min);
    const newValue = props.allowFloat ? newValueRaw : Math.round(newValueRaw);
    setValue(newValue);
    if (props.onValueChanged) props.onValueChanged(newValue);
  };

  const handlePointerUp = (e: PointerEvent) => {
    setDrag(false);
    window.removeEventListener("pointermove", handlePointerMove)
    window.removeEventListener("pointerup", handlePointerUp)
  };

  const onLineClick = (e: MouseEvent) => {
    if (!sliderRef) return;
    const rect = sliderRef.getBoundingClientRect();
    let pos = e.clientX - rect.left;
    pos = Math.max(0, Math.min(pos, rect.width)); // clamp

    const newValueRaw =
      props.min + (pos / rect.width) * (props.max - props.min);
    const newValue = props.allowFloat ? newValueRaw : Math.round(newValueRaw);
    setValue(newValue);
    if (props.onValueChanged) props.onValueChanged(newValue);
  };

  return (
    <div class={styles.root}>
      <div class={styles.slider} ref={sliderRef}>
        <div class={styles["line-hitbox"]}
          onPointerDown={handlePointerDown}>
          <div class={styles.line} />
        </div>
        <div
          style={{ left: `${percent()}%` }} class={styles.handle} />
      </div>
    </div>
  );
};

export default Slider;
</file>

<file path="components/section/CanvasSettings.tsx">
import { Component, createSignal } from "solid-js";
import { initLayer } from "~/models/layer/layerImage";
import {
  canvasStore,
  setCanvasStore
} from '~/stores/canvasStore';
import { allLayers, layerStore } from '~/stores/layerStore';

import styles from "@styles/components/section/canvas.module.css";
import { updateDSL } from "~/stores/imageStore";

const CanvasSettings: Component<{}> = (props) => {
  const [width, setWidth] = createSignal(canvasStore.canvas.width);
  const [height, setHeight] = createSignal(canvasStore.canvas.height);

  const changeCanvasSize = (e: any) => {
    e.preventDefault();
    setCanvasStore("canvas", "width", width);
    setCanvasStore("canvas", "height", height);

    allLayers().forEach((layer, i) => {
      initLayer(layer.id, layer.dotMagnification);
      updateDSL(layer.id);
    });
  };

  const resetAllLayers = (e: any) => {
    layerStore.layers.forEach((l) => {
      initLayer(l.id, l.dotMagnification);
    });
  };

  return (
    <div class="section_root">
      <p class="section_caption">canvas.</p>

      <form class="section_content" onSubmit={(e) => changeCanvasSize(e)}>
        <div class="fl-row">
          <div>
            <p>width</p>
            <input
              class={styles.size_input}
              type="number"
              name="width"
              onChange={(e) => setWidth(Number(e.target.value))}
              value={width()}
              min={0}
              max={1200}
              required
            />
          </div>
          <div>
            <p>height</p>
            <input
              class={styles.size_input}
              type="number"
              name="height"
              onChange={(e) => setHeight(Number(e.target.value))}
              value={height()}
              min={0}
              max={1200}
              required
            />
          </div>
          <button class={styles.button} type="submit">
            change
          </button>
        </div>
      </form>

      <button class={styles.button} onClick={resetAllLayers}>
        RESET ALL LAYERS
      </button>
    </div>
  );
};

export default CanvasSettings;
</file>

<file path="components/section/Color.tsx">
import { Component, For } from "solid-js";
import { colorStore } from '~/stores/colorStore';

import ColorPicker from "~/components/common/ColorPicker";
import { setCurrentPenColor } from "~/models/types/Pen";
import ColorBox from "../common/ColorBox";
import styles from "@styles/components/section/color.module.css";

const Color: Component<{}> = (props) => {
  const onColorClicked = (color: string, index: number) => {
    setCurrentPenColor(color);
  };

  return (
    <div class="section_root">
      <p class="section_caption">color.</p>
      <div class="section_content">
        <div class={styles.color_picker}>
          <ColorPicker />
        </div>
        <div class={styles.swatch_container}>
          <For each={colorStore.swatches}>
            {(item, index) => (
              <ColorBox
                color={item}
                sizePx={14}
                onClick={(color) => onColorClicked(color, index())}
                enableUsingSelection={true}
              />
            )}
          </For>
        </div>
      </div>
    </div>
  );
};

export default Color;
</file>

<file path="components/section/item/LayerItem.tsx">
import { createSortable, useDragDropContext } from "@thisbeyond/solid-dnd";
import { Component } from "solid-js";
import Light from "~/components/common/Light";
import { getNextMagnification } from "~/models/factories/utils";
import { Layer, LayerType } from "~/models/types/Layer";
import { allLayers, layerStore, setLayerStore } from '~/stores/layerStore';
import styles from "@styles/components/section/layer.module.css";

interface LayerItemProps {
  index: number;
  layer: Layer;
  draggingId?: string | null;
}

const LayerItem: Component<LayerItemProps> = (props) => {
  const { layer, draggingId } = props;

  const sortable = createSortable(layer.id);
  const context = useDragDropContext();
  const state = context?.[0];

  let detClass: "dot" | "image" | "automate" | undefined;
  switch (layer.type) {
    case LayerType.Dot:
      detClass = "dot";
      break;
    case LayerType.Image:
      detClass = "image";
      break;
    case LayerType.Automate:
      detClass = "automate";
      break;
  }

  const onDetClicked = () => {
    setLayerStore("activeLayerId", layer.id);
  };

  const onPreviewClicked = () => {
    if (props.index !== -1) {
      setLayerStore("layers", props.index, "enabled", (v: boolean) => !v);
    }
  };

  const onMagnifClicked = () => {
    const next = getNextMagnification(layer.dotMagnification);
    if (props.index !== -1) {
      setLayerStore("layers", props.index, "dotMagnification", next);
    }
  };

  const isActive = () => layerStore.activeLayerId === layer.id;

  return (
    <div
      class={styles.layer}
      classList={{
        "opacity-50": sortable.isActiveDraggable,
        "transition-transform": state && !!state.active.draggable,
      }}
      style={{ opacity: draggingId === layer.id ? 0.4 : 1 }}
      ref={sortable}
    >
      <p class={styles.type}>{layer.typeDescription}</p>
      <p>{props.index}.</p>
      <div style={{ display: "flex", "align-items": "center" }}>
        {/* <DSLButton /> */}
        <div
          class={[
            styles.layer_det,
            !layer.enabled && styles.disabled,
          ]
            .filter(Boolean)
            .join(" ")}
          onClick={onDetClicked}
        >
          <div class={styles.layer_preview} onClick={onPreviewClicked} />
          <p class={styles.name}> {layer.name}</p>
          <div
            class={styles.dot_magnif_container}
            onClick={(e) => {
              e.stopPropagation();
              onMagnifClicked();
            }}
            onMouseOver={(e) => e.stopPropagation()}
          >
            <p class={styles.dot_magnif}>x{layer.dotMagnification}</p>
          </div>
        </div>
        <Light class={styles.active_light} on={isActive()} />
      </div>
    </div>
  );
};

export default LayerItem;
</file>

<file path="components/section/item/PenItem.tsx">
import { Component } from "solid-js";
import ColorBox from "~/components/common/ColorBox";
import { sayRandomQuote } from "~/components/common/companion/QuotePool";
import Light from "~/components/common/Light";
import Slider from "~/components/common/Slider";
import { Pen } from "~/models/types/Pen";
import { penStore, setPenStore } from '~/stores/penStore';

import styles from "@styles/components/section/pen.module.css"

interface Props {
  pen: Pen;
  isInUse: boolean;
}

const PenItem: Component<Props> = (props: Props) => {
  return (
    <div class={styles.row}>
      <Light on={props.isInUse} />

      <p
        style={{
          width: "20%",
          padding: "10px 0",
          color: props.isInUse ? "red" : "unset",
          cursor: "pointer",
          "pointer-events": "all",
        }}
        onClick={() => {
          setPenStore({ usingIndex: penStore.pens.indexOf(props.pen) });
        }}
      >
        {props.pen.name}.
      </p>

      <ColorBox color={props.pen.color} />

      <div style={{ "flex-grow": 1 }}>
        <Slider
          min={1}
          max={30}
          default={props.pen.size}
          onValueChanged={(newValue) => {
            sayRandomQuote("pen-resize");
            console.log("size set to " + newValue);
            const penIndex = penStore.pens.findIndex(
              (p) => p.id === props.pen.id,
            );
            setPenStore("pens", penIndex, "size", newValue);
          }}
        />
      </div>

      <p style={{ width: "auto" }}>{props.pen.size}.</p>
    </div>
  );
};

export default PenItem;
</file>

<file path="components/section/LayerList.tsx">
import {
  closestCenter,
  DragDropProvider,
  DragDropSensors,
  SortableProvider,
} from "@thisbeyond/solid-dnd";
import { Component, createSignal, For } from "solid-js";
import { activeLayer, allLayers, layerStore, setLayerStore } from '~/stores/layerStore';
import styles from "@styles/components/section/layer.module.css";
import LayerItem from "./item/LayerItem";
import { addLayer } from "~/models/factories/addLayer";
import { removeLayer } from "~/models/factories/removeLayer";
// 並べ替え用ユーティリティ関数

const LayerList: Component<{}> = () => {
  const [items, setItems] = createSignal(allLayers());
  const [activeItem, setActiveItem] = createSignal(null);
  const ids = () => items().map((l) => l.id);

  const onDragStart = ({ draggable }: { draggable: any }) =>
    setActiveItem(draggable.id);

  function moveLayer(draggedId: string, targetIndex: number) {
    const fromIndex = layerStore.layers.findIndex((l) => l.id === draggedId);
    if (fromIndex === -1 || fromIndex === targetIndex) return;

    const updated = [...layerStore.layers];
    const [moved] = updated.splice(fromIndex, 1);
    updated.splice(targetIndex, 0, moved);
    setLayerStore("layers", updated);
    setItems(allLayers());
  }

  const onDragEnd = ({
    draggable,
    droppable,
  }: {
    draggable: any;
    droppable: any;
  }) => {
    if (draggable && droppable) {
      const currentItems = ids();
      const fromIndex = currentItems.indexOf(draggable.id);
      const toIndex = currentItems.indexOf(droppable.id);
      if (fromIndex !== toIndex) {
        moveLayer(draggable.id, toIndex);
      }
    }
  };

  return (
    <DragDropProvider
      onDragStart={onDragStart}
      onDragEnd={(e) => {
        onDragEnd({ draggable: e.draggable, droppable: e.droppable });
      }}
      collisionDetector={closestCenter}
    >
      <DragDropSensors>
        <div class="section_root">
          <div class="fl-row" style={{ "margin-bottom": "6px" }}>
            <p class="section_caption" style={{ "flex-grow": 1 }}>layers.</p>

            <div class="fl-row" style={{ gap: "4px" }}>
              <button onClick={() => {
                addLayer("new")
                setItems(allLayers())
              }}>+ add.</button>

              <button onClick={() => {
                removeLayer(activeLayer()?.id)
                setItems(allLayers())
              }}>- remove.</button>
            </div>
          </div>
          <div class="section_content">
            <div class={styles.layer_list}>
              <SortableProvider ids={ids()}>
                <For each={items()}>
                  {(layer, index) => <LayerItem layer={layer} index={index()} />}
                </For>
              </SortableProvider>
            </div>
            {/* <DragOverlay>
                                    <div class="sortable"><LayerItem layer={activeItemLayer()} /></div>
                                </DragOverlay> */}
          </div>
        </div>
      </DragDropSensors>
    </DragDropProvider >
  );
};

export default LayerList;
</file>

<file path="components/section/PenConfig.tsx">
import { Component, For } from "solid-js";
import PenItem from "./item/PenItem";
import { penStore } from '~/stores/penStore';

const PenConfig: Component<{}> = (props) => {
  return (
    <div class="section_root">
      <p class="section_caption">pen config.</p>
      <div class="section_content">
        <For each={penStore.pens}>
          {(item, index) => (
            <PenItem pen={item} isInUse={index() === penStore.usingIndex} />
          )}
        </For>
      </div>
    </div>
  );
};

export default PenConfig;
</file>

<file path="main.tsx">
import { render } from "solid-js/web";
import App from "./app";

render(() => <App />, document.getElementById("root")!);
</file>

<file path="models/dsl/DSL.ts">
import { SledgeNode } from '~/dsl/nodes/DSLNodes'
import { findLayerById } from '~/stores/layerStore'
import { LayerIn } from './nodes/pass/LayerIn'
import { LayerOut } from './nodes/pass/LayerOut'

export class DSL {
  layerIn: LayerIn
  readonly nodes: SledgeNode[]
  layerOut: LayerOut

  constructor(inLayerId: string, outLayerId: string) {
    this.layerIn = new LayerIn(inLayerId)
    this.nodes = []
    this.layerOut = new LayerOut(outLayerId)
  }

  public addNode(node: SledgeNode) {
    this?.nodes.push(node)
  }

  public build(exceptIn: boolean = false): string | undefined {
    const nodes =
      exceptIn ?
        [...this.nodes, this.layerOut]
      : [this.layerIn, ...this.nodes, this.layerOut]

    let nodeStrings: string[] = []
    let isAllNodeParseSuccessful = true
    nodes.forEach((node, i) => {
      const nodeStr = node.getNodeString()
      if (nodeStr !== undefined) nodeStrings.push(nodeStr)
      else {
        isAllNodeParseSuccessful = false
        throw `DSL parse failed in: ${node.name} [${i}]`
      }
    })

    if (isAllNodeParseSuccessful) {
      // if all nodes parsed successfully
      return nodeStrings.join(' > ') // in(inLayerId) > out(outLayerId) by default
    } else {
      // if some nodes failed to parse
      return undefined
    }
  }

  public toString(): string {
    let str = this.build()
    if (str === undefined) throw 'DSL parse failed.'
    else {
      // 読みやすくする
      const inId = this.layerIn.layerId
      const outId = this.layerOut.layerId
      if (inId !== undefined)
        str = str.replaceAll(inId, `${findLayerById(inId)?.name || 'N/A'} ID`)
      if (outId !== undefined)
        str = str.replaceAll(outId, `${findLayerById(outId)?.name || 'N/A'} ID`)
      str = str.replaceAll(' > ', '\n> ')
      return str
    }
  }
}
</file>

<file path="models/dsl/DSLRunner.ts">
import { cloneImageData } from "~/models/factories/utils";
import { decodeImageData, encodeImageData } from "~/utils/ImageUtils";
import { safeInvoke } from "~/utils/tauri";
import { DSL } from "./DSL";

export async function runDSL(
  dsl: DSL,
  image: ImageData,
): Promise<ImageData | undefined> {
  const encoded = encodeImageData(cloneImageData(image));

  const dslStr = dsl.build(true);
  if (dslStr === undefined) return;

  const result = await safeInvoke<string>("run_pipeline", {
    dsl: dslStr,
    encoded,
    width: image.width,
    height: image.height,
  });

  if (!result) return;
  return decodeImageData(result, image.width, image.height);
}
</file>

<file path="models/dsl/nodes/AvailableNodes.ts">
import { SledgeNode } from "./DSLNodes";
import { Brightness } from "./effect/Brightness";
import { GrayScale } from "./effect/GrayScale";
import { Invert } from "./effect/Invert";
import { Sepia } from "./effect/Sepia";
import { JpegGlitch } from "./fracture/JpegGlitch";

export const ALL_NODES: SledgeNode[] = [
  // effect
  new Brightness(),
  new GrayScale(),
  new Invert(),
  new Sepia(),
  // pass
  // new LayerIn(""),
  // new LayerOut(""),
  // fracture
  new JpegGlitch(),
];
</file>

<file path="models/dsl/nodes/DSLNodes.ts">
// 旧
// export enum ImageCommands {
//   INVERT = "invert",
//   GRAYSCALE = "grayscale",
//   GLITCH = "glitch",
//   SEPIA = "sepia",
//   BRIGHTNESS = "brightness",
// }
// export type ImageCommandParams =
//   | {
//       command:
//         | ImageCommands.INVERT
//         | ImageCommands.GRAYSCALE
//         | ImageCommands.SEPIA;
//     }
//   | { command: ImageCommands.BRIGHTNESS; delta: number };

export type NodeType = "effect" | "pass" | "fracture";

export interface NodeArg {
  name: string;
  default: number | string | undefined;
}

export abstract class SledgeNode {
  abstract name: string;
  abstract type: NodeType;
  abstract description: string;

  constructor() {}

  // error occured = undefined
  abstract getNodeString(): string | undefined;
}
</file>

<file path="models/dsl/nodes/effect/Brightness.ts">
import { EffectNode } from "./EffectNode";

export class Brightness extends EffectNode {
  name: string = "brightness";
  description: string = "brightness";

  constructor(private delta: number = 30) {
    super();
  }

  getNodeString(): string {
    return `${this.name}(${this.delta})`;
  }
}
</file>

<file path="models/dsl/nodes/effect/EffectNode.ts">
import { NodeType, SledgeNode } from "../DSLNodes";

export abstract class EffectNode extends SledgeNode {
  type: NodeType = "effect";
}
</file>

<file path="models/dsl/nodes/effect/GrayScale.ts">
import { EffectNode } from "./EffectNode";

export class GrayScale extends EffectNode {
  name: string = "grayscale";
  description: string = "grayscale";

  getNodeString(): string {
    return `${this.name}()`;
  }
}
</file>

<file path="models/dsl/nodes/effect/Invert.ts">
import { EffectNode } from "./EffectNode";

export class Invert extends EffectNode {
  name: string = "invert";
  description: string = "invert";

  getNodeString(): string {
    return `${this.name}()`;
  }
}
</file>

<file path="models/dsl/nodes/effect/Sepia.ts">
import { EffectNode } from "./EffectNode";

export class Sepia extends EffectNode {
  name: string = "sepia";
  description: string = "sepia";

  getNodeString(): string {
    return `${this.name}()`;
  }
}
</file>

<file path="models/dsl/nodes/fracture/FractureNode.ts">
import { NodeType, SledgeNode } from "../DSLNodes";

export abstract class FractureNode extends SledgeNode {
  type: NodeType = "fracture";
}
</file>

<file path="models/dsl/nodes/fracture/JpegGlitch.ts">
import { FractureNode } from "./FractureNode";

export class JpegGlitch extends FractureNode {
  name = "jpeg_glitch";
  description = "JPEG glitch effect using random byte corruption";

  private seed = Math.floor(Math.random() * 100);
  private quality = 90;
  private amount = 0.001; // 2%の破壊

  getNodeString(): string {
    return `${this.name}(${this.seed}, ${this.quality}, ${this.amount})`;
  }
}
</file>

<file path="models/dsl/nodes/pass/LayerIn.ts">
import { PassNode } from "./PassNode";

export class LayerIn extends PassNode {
  name: string = "in";
  description: string = "layer_in";

  constructor(public layerId?: string) {
    super();
  }

  getNodeString(): string | undefined {
    if (!this.layerId) return undefined;
    return `${this.name}(${this.layerId})`;
  }
}
</file>

<file path="models/dsl/nodes/pass/LayerOut.ts">
import { PassNode } from "./PassNode";

export class LayerOut extends PassNode {
  name: string = "out";
  description: string = "out";

  constructor(public layerId?: string) {
    super();
  }

  getNodeString(): string | undefined {
    if (!this.layerId) return undefined;
    return `${this.name}(${this.layerId})`;
  }
}
</file>

<file path="models/dsl/nodes/pass/PassNode.ts">
import { NodeType, SledgeNode } from "../DSLNodes";

export abstract class PassNode extends SledgeNode {
  type: NodeType = "pass";
}
</file>

<file path="models/factories/addLayer.ts">
import { DSL } from '../dsl/DSL'
import { LayerType } from '../types/Layer'
import { createLayer } from './createLayer'
import { allLayers, layerStore, setLayerStore } from '~/stores/layerStore'

export const addLayer = (
  name: string,
  type: LayerType = LayerType.Dot,
  enabled = true,
  dotMagnification = 1,
  dsl?: DSL
) => {
  const newLayer = createLayer(name, type, enabled, dotMagnification, dsl)

  const layers = [...allLayers()]
  layers.push(newLayer)

  setLayerStore('layers', layers)

  return layers
}
</file>

<file path="models/factories/createLayer.ts">
import { v4 as uuidv4 } from 'uuid'
import { DSL } from '../dsl/DSL'
import { initLayer } from '../layer/layerImage'
import { Layer, LayerType } from '../types/Layer'

export const createLayer = (
  name: string,
  type: LayerType,
  enabled = true,
  dotMagnification = 1,
  dsl?: DSL
): Layer => {
  const id = uuidv4()
  initLayer(id, dotMagnification)
  return {
    id,
    name,
    type,
    typeDescription: getTypeString(type),
    enabled,
    dotMagnification,
    dsl: dsl || new DSL(id, id),
  }
}

function getTypeString(type: LayerType): string {
  switch (type) {
    case LayerType.Dot:
      return 'dot layer.'
    case LayerType.Image:
      return 'image layer.'
    case LayerType.Automate:
      return 'automate layer.'
    default:
      return 'N/A.'
  }
}
</file>

<file path="models/factories/createPen.ts">
import { v4 as uuidv4 } from "uuid";
import { Pen } from "../types/Pen";

export const createPen = (name: string, size: number, color: string): Pen => ({
  id: uuidv4(),
  name,
  size,
  color,
});
</file>

<file path="models/factories/removeLayer.ts">
import { allLayers, setLayerStore } from '~/stores/layerStore'
import { imageStore, setImageStore } from '~/stores/imageStore'

export const removeLayer = (layerId?: string) => {
  if (layerId === undefined) return
  const layers = [...allLayers()]
  const index = layers.findIndex((l) => l.id === layerId)
  let newActiveIndex = 0
  if (index !== 0) newActiveIndex = index - 1

  layers.splice(index, 1)
  const images = Object.assign({}, imageStore)
  delete images[layerId]

  setLayerStore('layers', layers)
  setLayerStore('activeLayerId', layers[newActiveIndex].id)
  setImageStore(images)
}
</file>

<file path="models/factories/utils.ts">
const magnificationList: number[] = [1, 2, 4];
export const getNextMagnification = (dotMagnification: number) => {
  let index = magnificationList.findIndex((m) => m === dotMagnification);
  if (index != -1) {
    // 循環
    let nextIndex = index !== magnificationList.length - 1 ? index + 1 : 0;
    return magnificationList[nextIndex];
  } else return 1;
};

export function cloneImageData(src: ImageData): ImageData {
  return new ImageData(
    new Uint8ClampedArray(src.data), // ← 必ず新しい配列
    src.width,
    src.height,
  );
}
</file>

<file path="models/layer/getDrawnImageData.ts">
import { hexToRGB } from '~/utils/hexToRGB'
import { currentPen } from '~/stores/penStore'
import { findLayerById } from '~/stores/layerStore'
import { drawBrush } from '~/utils/BrushUtils'
import { setPixel } from '~/utils/ImageUtils'
import { drawLine } from '~/utils/MetricUtils'
import { cloneImageData } from '../factories/utils'

export enum DrawState {
  start,
  move,
  end,
}

export const getDrawnImageData = (
  layerId: string,
  state: DrawState,
  currentImage: ImageData,
  canvasPosition: { x: number; y: number },
  lastPosition?: { x: number; y: number } // 移動中などの補完用
): ImageData | undefined => {
  const layer = findLayerById(layerId)
  if (layer === undefined) return undefined
  canvasPosition = getMagnificationPosition(
    canvasPosition,
    layer.dotMagnification
  )
  if (lastPosition)
    lastPosition = getMagnificationPosition(
      lastPosition,
      layer.dotMagnification
    )

  const pen = currentPen()
  const [r, g, b] = hexToRGB(pen.color)

  const imageData = cloneImageData(currentImage)

  drawBrush(canvasPosition.x, canvasPosition.y, pen.size, (x, y) => {
    if (pen.name === 'eraser') {
      setPixel(imageData, x, y, 0, 0, 0, 0)
    } else {
      setPixel(imageData, x, y, r, g, b, 255)
    }
  })

  if (state === DrawState.move && lastPosition !== undefined)
    drawLine(
      lastPosition.x,
      lastPosition.y,
      canvasPosition.x,
      canvasPosition.y,
      (x, y) => {
        drawBrush(x, y, pen.size, (px, py) => {
          if (pen.name === 'eraser') {
            setPixel(imageData, x, y, 0, 0, 0, 0)
          } else {
            setPixel(imageData, px, py, r, g, b, 255)
          }
        })
      }
    )

  return imageData
}

function getMagnificationPosition(
  position: { x: number; y: number },
  dotMagnification: number
) {
  return {
    x: Math.floor(position.x / dotMagnification),
    y: Math.floor(position.y / dotMagnification),
  }
}
</file>

<file path="models/layer/history.ts">
import { setImageStore } from '~/stores/imageStore'

export function undo(layerId: string) {
  console.log('undo')
  setImageStore(layerId, (state) => {
    if (state.undoStack.length === 0) return state
    const prev = state.undoStack[state.undoStack.length - 1]
    const newUndo = state.undoStack.slice(0, -1)
    const newRedo = [state.current, ...state.redoStack]
    return { current: prev, undoStack: newUndo, redoStack: newRedo }
  })
  // updateDSL(layerId);
}

export function redo(layerId: string) {
  setImageStore(layerId, (state) => {
    if (state.redoStack.length === 0) return state
    const next = state.redoStack[0]
    const newRedo = state.redoStack.slice(1)
    const newUndo = [...state.undoStack, state.current]
    return { current: next, undoStack: newUndo, redoStack: newRedo }
  })
  // updateDSL(layerId);
}
</file>

<file path="models/layer/layerImage.ts">
import { canvasStore } from '~/stores/canvasStore'
import { setImageStore } from '~/stores/imageStore'
import { LayerImageState } from '../types/LayerImageState'

export function initLayer(layerId: string, dotMagnification: number) {
  const blank = new ImageData(
    Math.round(canvasStore.canvas.width / dotMagnification),
    Math.round(canvasStore.canvas.height / dotMagnification)
  )
  const dslBlank = new ImageData(
    Math.round(canvasStore.canvas.width / dotMagnification),
    Math.round(canvasStore.canvas.height / dotMagnification)
  )
  setImageStore(layerId, {
    current: blank,
    DSLcurrent: dslBlank,
    undoStack: [],
    redoStack: [],
  })
}

export function registerNewHistory(layerId: string, newData: ImageData) {
  setImageStore(layerId, (state: LayerImageState) => {
    const prev = state.current
    return {
      current: newData,
      undoStack: [...state.undoStack, prev],
      redoStack: [],
    }
  })
}
</file>

<file path="models/types/Canvas.ts">
export type Canvas = {
  width: number;
  height: number;
};

export const createCanvas = (width = 800, height = 1200): Canvas => ({
  width,
  height,
});
</file>

<file path="models/types/Layer.ts">
import { DSL } from "~/dsl/DSL";

export enum LayerType {
  Dot,
  Image,
  Automate,
}

export type Layer = {
  id: string;
  name: string;
  type: LayerType;
  typeDescription: string; // 各タイプの説明
  enabled: boolean;
  dotMagnification: number;
  dsl: DSL;
};
</file>

<file path="models/types/LayerImageState.ts">
export type LayerImageState = {
  current: ImageData;
  DSLcurrent?: ImageData;
  undoStack: ImageData[];
  redoStack: ImageData[];
};
</file>

<file path="models/types/Pen.ts">
import { penStore, setPenStore } from '~/stores/penStore'

export type Pen = {
  id: string
  name: string
  size: number
  color: string
}

export const setCurrentPenColor = (colorHexString: string) => {
  return setPenStore('pens', penStore.usingIndex, 'color', colorHexString)
}
</file>

<file path="routes/[...404].tsx">
import { Title } from "@solidjs/meta";
import { HttpStatusCode } from "@solidjs/start";

export default function NotFound() {
  return (
    <main>
      <Title>Not Found</Title>
      <HttpStatusCode code={404} />
      <h1>Page Not Found</h1>
      <p>
        Visit{" "}
        <a href="https://start.solidjs.com" target="_blank">
          start.solidjs.com
        </a>{" "}
        to learn how to build SolidStart apps.
      </p>
    </main>
  );
}
</file>

<file path="routes/index.tsx">
import CanvasArea from "~/components/canvas/CanvasArea";
import CanvasSettings from "~/components/section/CanvasSettings";
import Color from "~/components/section/Color";
import Companion from "~/components/common/companion/Companion";
import EdgeInfo from "~/components/common/EdgeInfo";
import LayerList from "~/components/section/LayerList";
import PenConfig from "~/components/section/PenConfig";

export default function Home() {
  return (
    <main>
      <div id="root">
        <div id="sidebar">
          <EdgeInfo />

          <div id="content">
            <Color />
            <PenConfig />
            <LayerList />
            <CanvasSettings />
          </div>
        </div>

        <CanvasArea />
        <div id="misc_container">
          <p id="sledge">sledge.</p>
        </div>
        <Companion />
      </div>
    </main>
  );
}
</file>

<file path="stores/canvasStore.ts">
import { createStore } from 'solid-js/store'
import { createCanvas } from '~/models/types/Canvas'

// canvas

export const [canvasStore, setCanvasStore] = createStore({
  canvas: createCanvas(400, 400),
})
</file>

<file path="stores/colorStore.ts">
import { createStore } from 'solid-js/store'

// color

export const [colorStore, setColorStore] = createStore({
  swatches: [
    '#000000',
    '#FFFFFF',
    '#ffff00',
    '#00ffff',
    '#00ff00',
    '#ff00ff',
    '#ff0000',
    '#0000ff',
    '#000080',
    '#400080',
  ],
})
</file>

<file path="stores/imageStore.ts">
import { createStore } from 'solid-js/store'
import { LayerImageState } from '~/models/types/LayerImageState'
import { findLayerById, layerStore } from './layerStore'
import { runDSL } from '~/models/dsl/DSLRunner'

// image

export const [imageStore, setImageStore] = createStore<
  Record<string, LayerImageState>
>({})
export const activeImage = (): LayerImageState =>
  imageStore[layerStore.activeLayerId]

export const updateDSL = (layerId: string) => {
  const dsl = findLayerById(layerId)?.dsl
  const image = imageStore[layerId].current
  if (dsl === undefined) return
  runDSL(dsl, image).then((result) => {
    if (result) {
      setImageStore(layerId, 'DSLcurrent', result)
    }
  })
}
</file>

<file path="stores/layerStore.ts">
import { createStore } from 'solid-js/store'
import { createLayer } from '~/models/factories/createLayer'
import { LayerType } from '~/models/types/Layer'

// layer
const DEFAULT_LAYERS = [createLayer('dot1', LayerType.Dot, true, 1)]

export const [layerStore, setLayerStore] = createStore({
  layers: DEFAULT_LAYERS,
  activeLayerId: DEFAULT_LAYERS[0].id,
})

export const allLayers = () => layerStore.layers
export const findLayerById = (id: string) =>
  allLayers().find((layer) => layer.id === id)
export const activeLayer = () => findLayerById(layerStore.activeLayerId)
export const activeIndex = () =>
  allLayers().findIndex((layer) => layer.id === layerStore.activeLayerId)
</file>

<file path="stores/metricStore.ts">
import { createStore } from 'solid-js/store'

// metric
export const [metricStore, setMetricStore] = createStore({
  lastMouseWindow: { x: 0, y: 0 },
  lastMouseOnCanvas: { x: 0, y: 0 },
  isInStroke: false,
  zoom: 1,
  touchZoomSensitivity: 0.5,
  wheelZoomStep: 0.1,
  // オフセットの初期値
  offsetOrigin: { x: 0, y: 0 },
  offset: { x: 0, y: 0 },

  isDragging: false,
})
</file>

<file path="stores/penStore.ts">
import { createStore } from 'solid-js/store'
import { createPen } from '~/models/factories/createPen'

// pen

export const [penStore, setPenStore] = createStore({
  usingIndex: 0,
  pens: [createPen('pen', 1, '#000000'), createPen('eraser', 4, 'none')],
})
export const currentPen = () => penStore.pens[penStore.usingIndex]
</file>

<file path="styles/components/canvas/canvas_area.module.css">
.canvas_area {
  background-color: #fcfcfc;
  display: flex;
  flex: 1;
  flex-direction: column;
  height: 100%;
  overflow: hidden;
  padding: 20px;

  /* 上部パディング（オプション） */
  padding-top: var(--window-top-padding);
  position: relative;
  width: 100%;
}
</file>

<file path="styles/components/canvas/canvas_stack.module.css">
:root {
  --layer-opacity: 0.15;
}

.canvas_stack {
  align-items: center;
  border: 1px solid black;
  display: flex;
  justify-content: center;
  position: relative;
}

.image-container:focus-within {
  border: 2px black solid;
}

.resize-image {
  height: 100%;
  object-fit: fill;
  width: 100%;
}
</file>

<file path="styles/components/canvas/controls.module.css">
* {
  z-index: 1000;
}

.cursor {
  background-color: black;
  height: 4px;
  left: 220px;
  position: absolute;
  top: 170px;
  width: 4px;
}

.top-right-button-container {
  display: flex;
  flex-direction: row;
  gap: 10px;
  position: absolute;
  right: 30px;
  top: 20px;
}

.button {
  background-color: deepskyblue;
  color: white;
  cursor: pointer;
  font-size: 1rem;
  padding: 4px;
}

.top-right-nav {
  display: flex;
  flex-direction: row;
  gap: 55px;
  position: absolute;
  right: 30px;
  top: 60px;
}

.bottom-history {
  bottom: 50px;
  display: flex;
  flex-direction: column;
  gap: 5px;
  position: absolute;
}

.history-row {
  display: flex;
  gap: 20px;
  opacity: 0.2;
  width: 60%;
}

.history-text {
  white-space: nowrap;
}

.undo_redo {
  cursor: pointer;
  font-size: 1rem;
  height: fit-content;
  pointer-events: all;
}
</file>

<file path="styles/components/canvas/image_pool.module.css">
.resize-drag-container {
  /* This makes things *much* easier */
  box-sizing: border-box;
  font-family: sans-serif;
  left: 0;
  padding: 0;
  position: absolute;
  top: 0;
  touch-action: none;
  width: 120px;
  z-index: 100;
}

.image-container {
  height: 100%;
  width: 100%;
}
</file>

<file path="styles/components/canvas/layer_canvas.module.css">
.layer-canvas {
  image-rendering: pixelated; /* ドット絵に重要 */
  pointer-events: none; /* マウスイベントは通さない（必要に応じて） */
  position: absolute;
}

.layer-canvas.dev-hint[data-layer-id="dot1"] {
  background-color: rgb(255 0 0 / var(--layer-opacity)); /* 赤系 */
}

.layer-canvas.dev-hint[data-layer-id="dot2"] {
  background-color: rgb(0 255 0 / var(--layer-opacity)); /* 緑系 */
}

.layer-canvas.dev-hint[data-layer-id="dot3"] {
  background-color: rgb(0 0 255 / var(--layer-opacity)); /* 青系 */
}

.layer-canvas.dev-hint[data-layer-id="auto1"] {
  background-color: rgb(255 255 0 / var(--layer-opacity)); /* 黄系 */
}

.layer-canvas.dev-hint[data-layer-id="image1"] {
  background-color: rgb(255 0 255 / var(--layer-opacity)); /* ピンク系 */
}

.hidden {
  opacity: 0;
  pointer-events: auto; /* display:none ではなくイベントを通す */
}
</file>

<file path="styles/components/companion.module.css">
.root {
  bottom: 0;
  left: 500px;
  pointer-events: none;
  position: absolute;
  z-index: 999;
}

.wrapper {
  animation: fluffy 2s ease-in-out infinite;
  height: 300px;
  transform-origin: center center;
  width: 300px;
}

.companion {
  anchor-name: --companion;
  display: flex;
  flex-direction: column;
  height: 50px;
  image-rendering: pixelated;
  margin: 80px auto;
  margin-left: 0;
  width: 50px;
}

.giggle {
  animation: giggle 0.5s;
  animation-iteration-count: 10;
}

.quote_box_container {
  background-color: #ddd;
  bottom: calc(anchor(top) + 17px);
  justify-self: anchor-center;
  position: absolute;
  position-anchor: --companion;
  width: fit-content;
}

.quote_box {
  anchor-name: --box;
  background: #fff;
  border: solid 1px #555;
  border-radius: 3px;
  max-width: 200px;
  overflow-wrap: break-word;
  padding: 12px;
  width: fit-content;
}

.quote_box::before {
  border: 7px solid transparent;
  border-top: 7px solid #fff;
  content: '';
  padding-left: 1px;
  position: absolute;
  position-anchor: --companion;
  top: calc(anchor(--box bottom) - 2px);
  z-index: 2;
}

.quote_box::after {
  border: 8px solid transparent;
  border-top: 8px solid #555;
  content: '';
  position: absolute;
  position-anchor: --companion;
  top: calc(anchor(--box bottom) - 1px);
}

.quote {
  image-rendering: pixelated;
}

@keyframes fluffy {
  0%,
  100% {
    transform: translateY(0);
  }

  50% {
    transform: translateY(-5px);
  }
}

@keyframes giggle {
  0% {
    transform: rotate(0deg);
  }

  25% {
    transform: rotate(2deg);
  }

  50% {
    transform: rotate(0deg);
  }

  75% {
    transform: rotate(-2deg);
  }

  100% {
    transform: rotate(0deg);
  }
}
</file>

<file path="styles/components/dsl_button.module.css">
.root {
  cursor: pointer;
  height: 20px;
  image-rendering: pixelated;
  margin: 4px;
  opacity: 0.7;
  pointer-events: all;
  width: 20px;
}

.root:any-hover {
  opacity: 0.3;
  transform: translate(0, 1px);
}
</file>

<file path="styles/components/light.module.css">
.light-inner {
  filter: drop-shadow(0 0 0 red);
  opacity: 0;
  transition: none;
}

.light-inner.on {
  filter: drop-shadow(0 0 1px red);
  opacity: 1;
  transition: opacity 01s ease;
}
</file>

<file path="styles/components/section/canvas.module.css">
.root {
  margin: 1rem 0;
}

.caption {
  margin-bottom: 1rem;
}

.size_form {
  display: flex;
  flex-direction: row;
}

.size_label {
  font-size: 0.5rem;
}

.size_input {
  font-size: 10px;
  margin: 4px;
  min-width: 100px;
}

.button {
  margin: 4px;
  padding: 4px;
}
</file>

<file path="styles/components/section/color.module.css">
.color_picker {
  margin: 8px 0 12px;
}

.swatch_container {
  display: flex;
  flex-direction: row;
  gap: 5px;
  position: relative;
}

.color_content {
  display: flex;
  flex-direction: column;
  margin-left: 10px;
}
</file>

<file path="styles/components/section/layer.module.css">
.image_insert_arrow {
  height: 100%;
  overflow: visible;
  width: 10px;
}

.layer_list {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  gap: 4px;
  position: relative;
  width: 100%;
}

#layer {
  width: 100%;

  /* 高さはコンテンツに合わせる */
}

.disabled {
  opacity: 0.2;
}

.disabled > * > * > p {
  text-decoration: line-through;
}

/* base det */
.layer_det {
  background-color: #f0f0f0;
  border-left: 1px solid black;
  cursor: pointer;
  display: flex;
  flex-direction: row;
  flex-grow: 1;
  padding: 8px;
}

.layer_det:any-hover {
  filter: brightness(0.94);
  transform: translate(0, 1px);
}

.image {
  background-color: #ffe0e0;
  border-left: 1px solid red;
}

.automate {
  background-color: aliceblue;
  border-left: 1px solid blue;
}

.type {
  font-size: 0.5rem;
  margin-right: 20px;
  opacity: 0.4;
  position: absolute;
  right: 0;
  text-align: end;
  width: 100%;
}

.layer_preview {
  border: 1px solid black;
  height: 20px;
  width: 14px;
}

.name {
  font-family: '04B03B';
  font-size: 1rem;
  margin: 8px 0 0 24px;
}

.dot_magnif_container {
  align-self: center;
  border: 1px black solid;
  border-radius: 6px;
  cursor: pointer;
  margin-left: auto;
  margin-right: 0;
  padding: 2px 6px;
  pointer-events: all;
}

.dot_magnif_container:any-hover {
  background-color: #ffffff40;
}

.dot_magnif {
  font-family: '04B03B';
  font-size: 0.8rem;
}

.active_light {
  align-self: center;
  margin-left: 8px;
  margin-right: 8px;
}

.drop_placeholder {
  border: 2px dashed #aaa;
  border-radius: 4px;
  height: 32px;
  margin: 4px 0;
}
</file>

<file path="styles/components/section/pen.module.css">
.row {
  align-items: center;
  display: flex;
  flex-direction: row;
  gap: 10px;
  width: 100%;
}
</file>

<file path="styles/components/slider.module.css">
.root {
  width: 100%;
}

.slider {
  align-items: center;
  display: flex;
  height: auto;
  overflow: visible;
  position: relative;
  width: 100%;
}

.line-hitbox {
  align-items: center;
  background-color: transparent;
  cursor: pointer;
  display: flex;
  height: 16px;
  position: absolute;
  width: 100%;
}

.line {
  background-color: black;
  display: flex;
  height: 1px;
  pointer-events: none; /* イベントは親に任せる */
  width: 100%;
}

.handle-hitbox {
  align-items: center;

  /* ユーザーには見えないけどクリックできる */
  background-color: transparent;
  cursor: pointer;
  display: flex;
  height: 24px;
  position: absolute;
  transform: translateX(-50%);
  width: 20px;
}

.handle {
  background-color: black;
  height: 8px;
  left: 50%;
  pointer-events: none; /* イベントは親に任せる */
  position: absolute;
  transform: translateX(-50%);
  width: 2px;
}
</file>

<file path="styles/font.css">
@font-face {
  font-family: '04B08';
  src: url('/fonts/04B_08__.ttf');
}

@font-face {
  font-family: '04B03B';
  src: url('/fonts/04B_03B_.ttf');
}
</file>

<file path="styles/global.css">
@import url('font.css');
@import url('reset.css');
@import url('utils.css');
@import url('section.css');

#sidebar {
  display: flex;
  flex-direction: row;
}

#sidebar > #edge {
  display: flex;
  flex-direction: column;
  gap: 20px;
  padding: 10px 0 20px 14px;
}

#sidebar > #edge > p {
  font-size: 0.5rem;
  letter-spacing: 2px;
  margin: 0;
  transform: rotate(180deg) scaleX(0.8);
  white-space: nowrap;
  writing-mode: vertical-rl;
}

#sidebar > #content {
  border-right: 1px solid black;
  display: flex;
  flex-direction: column;
  gap: 2rem;
  height: 100%;
  padding: var(--window-top-padding) 50px 10px 40px;
  width: 300px;
}

#sledge {
  bottom: 10px;
  position: absolute;
  right: 10px;
}
</file>

<file path="styles/reset.css">
/* html, body, #root, main をウィンドウ全体に */
html,
body,
#root,
main {
  height: 100vh;
  margin: 0;
  overflow: hidden;
  padding: 0;
  touch-action: none;
  width: 100vw;
}

/* 全体レイアウト（SolidJS のルートを flex コンテナに） */
#root {
  display: flex;
  flex-direction: row;
  user-select: none;
}

/* body / main の背景・フォント */
body,
main {
  background-color: #fdfdfd;
  font-family: '04B08';
}

/* ==========================================================================
     Typography & Basic Elements
     ========================================================================== */

p {
  font-size: 0.5rem;
  letter-spacing: 2px;
  margin: 0;
}

.it {
  font-style: italic;
}

ul {
  list-style: none;
  padding-left: 0;
}

button,
a,
input {
  font-family: '04B08';
  font-size: 0.8rem;
  letter-spacing: 2px;
}

/* Chrome, Safari, Edge, Opera */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  appearance: none;
  margin: 0;
}

/* Firefox */
input[type='number'] {
  appearance: textfield;
}

button {
  background: white;
  border: 1px black solid;
  border-radius: 2px;
  cursor: pointer;
  font-size: 0.5rem;
  height: fit-content;
  padding: 2px 6px;
  pointer-events: all;
}

button:any-hover {
  background: #f0f0f0;
  transform: translateY(1px);
}
</file>

<file path="styles/section.css">
.section_root {
  display: flex;
  flex-direction: column;
}

.section_caption {
  margin-bottom: 8px;
}

.section_content {
  display: flex;
  flex-direction: column;
  width: 100%;
}
</file>

<file path="styles/utils.css">
:root {
  --window-top-padding: 20px;
}

.fl-col {
  display: flex;
  flex-direction: column;
}

.fl-row {
  display: flex;
  flex-direction: row;
}
</file>

<file path="utils/BrushUtils.ts">
export function drawBrush(
  x: number,
  y: number,
  size: number,
  drawFn: (x: number, y: number) => void,
) {
  const half = Math.floor(size / 2);
  for (let dy = -half; dy <= half; dy++) {
    for (let dx = -half; dx <= half; dx++) {
      drawFn(x + dx, y + dy);
    }
  }
}
</file>

<file path="utils/DSLUtils.ts">
import { findLayerById } from '~/stores/layerStore'
import { imageStore } from '~/stores/imageStore'
import { downloadImageData } from './export'
import { runDSL } from '~/models/dsl/DSLRunner'

export const testDSLTime = (layerId: string) => {
  const layer = findLayerById(layerId)
  if (layer === undefined) {
    throw 'layer not found.'
    return
  }
  const imageData = imageStore[layerId].current

  const start = new Date().getTime()
  console.log(`DSL run started.\n${layer.dsl.build()}`)
  runDSL(layer.dsl, imageData).then((im) => {
    const end = new Date().getTime()
    console.log(`DSL run end.`)
    console.log(
      `result: ${im ? 'success' : 'failed'}. TOTAL TIME IS ${end - start}ms.`
    )

    if (im) downloadImageData(im, 'test-' + end + '.png')
  })
}
</file>

<file path="utils/EffectUtils.ts">
import { decodeImageData, encodeImageData } from "./ImageUtils";
import { safeInvoke } from "./tauri";

export async function invertImageInRust(
  image: ImageData,
): Promise<ImageData | undefined> {
  const encoded = encodeImageData(image);
  const result = await safeInvoke<string>("invert", {
    encoded,
    width: image.width,
    height: image.height,
  });

  if (!result) return;

  return decodeImageData(result, image.width, image.height);
}
</file>

<file path="utils/export.ts">
import { layerStore } from '~/stores/layerStore'

export function exportActiveLayerUpscaled(scale = 10) {
  const layerId = layerStore.activeLayerId
  if (!layerId) return

  const originalCanvas = document.getElementById(
    `canvas-${layerId}`
  ) as HTMLCanvasElement
  if (!originalCanvas) {
    alert('対象のレイヤーが見つかりません。')
    return
  }

  const w = originalCanvas.width
  const h = originalCanvas.height

  // オフスクリーンキャンバスを作る
  const exportCanvas = document.createElement('canvas')
  exportCanvas.width = w * scale
  exportCanvas.height = h * scale

  const ctx = exportCanvas.getContext('2d')
  if (!ctx) {
    alert('Canvasコンテキスト取得に失敗しました。')
    return
  }

  // ピクセル補間を無効化
  ctx.imageSmoothingEnabled = false

  // 元のキャンバスをscale倍に引き伸ばして描画（補完なし）
  ctx.drawImage(originalCanvas, 0, 0, exportCanvas.width, exportCanvas.height)

  // エクスポート処理
  exportCanvas.toBlob((blob) => {
    if (!blob) {
      alert('エクスポートに失敗しました。')
      return
    }

    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${layerId}_x${scale}.png`
    document.body.appendChild(a)
    a.click()
    a.remove()
    URL.revokeObjectURL(url)
  }, 'image/png')
}

export function downloadImageData(
  imageData: ImageData,
  filename: string = 'image',
  scale: number = 10
) {
  // 一時的な canvas を作成
  const canvas = document.createElement('canvas')
  canvas.width = imageData.width
  canvas.height = imageData.height

  // ImageData を描画
  const ctx = canvas.getContext('2d')
  if (!ctx) {
    console.error('2D context not available')
    return
  }
  ctx.putImageData(imageData, 0, 0)

  const w = canvas.width
  const h = canvas.height

  // オフスクリーンキャンバスを作る
  const exportCanvas = document.createElement('canvas')
  exportCanvas.width = w * scale
  exportCanvas.height = h * scale

  const ctxEx = exportCanvas.getContext('2d')
  if (!ctxEx) {
    alert('Canvasコンテキスト取得に失敗しました。')
    return
  }

  // ピクセル補間を無効化
  ctxEx.imageSmoothingEnabled = false
  // 元のキャンバスをscale倍に引き伸ばして描画（補完なし）
  ctxEx.drawImage(canvas, 0, 0, exportCanvas.width, exportCanvas.height)

  // エクスポート処理
  exportCanvas.toBlob((blob) => {
    if (!blob) {
      alert('エクスポートに失敗しました。')
      return
    }

    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${filename}_x${scale}.png`
    document.body.appendChild(a)
    a.click()
    a.remove()
    URL.revokeObjectURL(url)
  }, 'image/png')
}
</file>

<file path="utils/hexToRGB.ts">
// "#rrggbb" -> r/g/b
export function hexToRGB(hex: string): [number, number, number] {
  const r = parseInt(hex.slice(1, 3), 16)
  const g = parseInt(hex.slice(3, 5), 16)
  const b = parseInt(hex.slice(5, 7), 16)
  return [r, g, b]
}
</file>

<file path="utils/ImageUtils.ts">
export function setPixel(
  image: ImageData,
  x: number,
  y: number,
  r: number,
  g: number,
  b: number,
  a: number,
) {
  if (x < 0 || x >= image.width || y < 0 || y >= image.height) return;
  const i = (y * image.width + x) * 4;
  image.data[i + 0] = r;
  image.data[i + 1] = g;
  image.data[i + 2] = b;
  image.data[i + 3] = a;
}

export function encodeImageData(imageData: ImageData): string {
  const bytes = new Uint8Array(imageData.data.buffer);
  let binary = "";
  for (let i = 0; i < bytes.length; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return btoa(binary); // Base64 encode
}

export function decodeImageData(
  encoded: string,
  width: number,
  height: number,
): ImageData {
  const binary = atob(encoded);
  const buffer = new Uint8ClampedArray(binary.length);
  for (let i = 0; i < binary.length; i++) {
    buffer[i] = binary.charCodeAt(i);
  }
  return new ImageData(buffer, width, height);
}
</file>

<file path="utils/import.ts">
import { registerNewHistory } from '~/models/layer/layerImage'
import { layerStore } from '~/stores/layerStore'
import { imageStore } from '~/stores/imageStore'

// 画像ファイルをキャンバスに焼き込む（補完なし・左上合わせ・切り捨て）
export function importImageToActiveLayer(file: File) {
  const layerId = layerStore.activeLayerId
  if (!layerId) return

  const imageData = imageStore[layerId]?.current
  if (!imageData) {
    alert('現在のレイヤーに描画できません。')
    return
  }

  const img = new Image()
  const reader = new FileReader()

  reader.onload = (e) => {
    img.onload = () => {
      const w = imageData.width
      const h = imageData.height

      // オフスクリーンCanvasで描画 → ImageData取得
      const canvas = document.createElement('canvas')
      canvas.width = w
      canvas.height = h
      const ctx = canvas.getContext('2d')
      if (!ctx) return

      ctx.imageSmoothingEnabled = false
      ctx.clearRect(0, 0, w, h)
      ctx.drawImage(img, 0, 0, w, h) // 左上にそのまま描く（拡大/縮小なし）

      const importedData = ctx.getImageData(0, 0, w, h)
      registerNewHistory(layerId, importedData)
    }
    img.src = e.target?.result as string
  }

  reader.readAsDataURL(file)
}
</file>

<file path="utils/MetricUtils.ts">
export function roundPosition(position: { x: number; y: number }): {
  x: number;
  y: number;
} {
  return {
    x: Math.floor(position.x),
    y: Math.floor(position.y),
  };
}

export function drawLine(
  x0: number,
  y0: number,
  x1: number,
  y1: number,
  draw: (x: number, y: number) => void,
) {
  const dx = Math.abs(x1 - x0);
  const dy = Math.abs(y1 - y0);
  const sx = x0 < x1 ? 1 : -1;
  const sy = y0 < y1 ? 1 : -1;
  let err = dx - dy;

  while (true) {
    draw(x0, y0);
    if (x0 === x1 && y0 === y1) break;
    const e2 = 2 * err;
    if (e2 > -dy) {
      err -= dy;
      x0 += sx;
    }
    if (e2 < dx) {
      err += dx;
      y0 += sy;
    }
  }
}
</file>

<file path="utils/tauri.ts">
import { getTauriVersion } from "@tauri-apps/api/app";
import { invoke as tauriInvoke } from "@tauri-apps/api/core";

let _isTauri: boolean | null = null;

export async function isTauri(): Promise<boolean> {
  if (_isTauri !== null) return _isTauri;
  try {
    await getTauriVersion();
    _isTauri = true;
  } catch {
    _isTauri = false;
  }
  return _isTauri;
}

export async function safeInvoke<T>(
  cmd: string,
  args?: Record<string, unknown>,
): Promise<T | undefined> {
  if (!(await isTauri())) {
    console.warn(`[safeInvoke] '${cmd}' skipped (not in Tauri environment)`);
    return undefined;
  }

  try {
    const result = await tauriInvoke<T>(cmd, args);
    return result;
  } catch (e) {
    console.error(`[safeInvoke] '${cmd}' failed:`, e);
    return undefined;
  }
}
</file>

</files>
